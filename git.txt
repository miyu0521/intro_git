もう怖くないGit！チーム開発で必要なGitを完全マスター

Gitとはなんのために有るのか
→バージョンを管理するため
　ファイルの最新の状態がわかる、誰がいつ何を変更したかわかる、以前の状態に戻せる

Gitの歴史
リーナス・トーバルズ　LINUXカーネル開発で利用していたバージョン管理システムのライセンスが変更され、使用できなくなった
→Linux開発用のバージョン管理システムを新たにするため、2005年頃にGitの原型になるプログラムの開発が開始された
開発を迅速に行えるように開発された
・スピード
・シンプルな設計
・ブランチが並列で開発可能
・大規模プロジェクトを効率的に取り扱える

開発の流れ
リポジトリ：変更履歴を記録する場所
commit:個人リポジトリに変更履歴を記録
push:共有リポジトリに変更を共有

pull:共有リポジトリの情報を同期

GitHubって何？
もともと友達とコードをシェアしやすいGitリポジトリのホスティングサービス
→ファイルをオンライン上で預かる
特徴
・プルリクエストで複数人開発
・世界中のチームがGitHub上で開発（ソーシャルコーディングの場）
・非公開リポジトリは有料、公開リポジトリは無料


Linuxターミナル頻出コマンド
cd・・・ディレクトリを移動
ls・・・ディレクトリの内容を表示する（-aで隠しファイルを含めたディレクトリ全内容を表示）
mkdir・・・ディレクトリを新規作成
rm・・・ファイルを削除
cp・・・ファイルをコピー
mv・・・ファイルの移動とファイル名の変更

ローカルリポジトリの新規作成
リポジトリとはファイルやディレクトリの状態変更履歴を記録する場所
"git init"コマンドでリポジトリを作成する
initialize .gitディレクトリが作成される・・・ファイルとファイルの変更履歴を記録してくれる

基本的なワークフロー
①ファイルの変更をステージングエリアへ追加する git add
②ローカルリポジトリにコミットする git commit
③リモートリポジトリにプッシュする git push

変更をコミットする流れ
ファイルを変更したら
①ステージングエリアへ追加　git add
  複数のファイルを変更したときに、コミットするファイルを選択するために有るのがステージングエリア
　git add [ファイル名]　 git add .で変更すべてを追加
②リポジトリにメッセージをつけてコミット git commit　
　コミットすることで変更がリポジトリ内に時系列で記録される

わかりやすいコミットメッセージを書く
他のメンバーが「何をどうして変更したのか」わかるようなメッセージをつける
例）一行目　変更内容の要約
　　二行目　空行　
　　三行目　変更した理由
　




